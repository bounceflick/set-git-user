#!/bin/bash

# N.b. This program favors early termination (with `exit`) over multiple levels of nested
# conditionals (i.e. if-then-else expressions). That's why there's very little indendation
# and many occurances of logical "and" (&&) and "or" (||) operators. Modifications should stick
# to this style.

# Exit immediately if any line that isn't an expression or a pipeline fails
set -e

# Enforce the use of git's credential cache - this means that github credentials used for a
# fetch/push will be cached for 4hrs
git config --global credential.helper 'cache --timeout=14400'
# Flush any existing cached credentials because invocation of this script means we are changing
# github users
git credential-cache exit

# No args given - show command usage and existing author config
test $1 || {
  echo "\
Set git username(s):
  iam   <github-username>
  weare <github-username> [and] <github-username>
Sign out:
  iam   out
  weare out"
  current_user_name=`git config --global user.name`
  current_user_email=`git config --global user.email`

  echo
  echo "\
For this to work you must have filled out the name and email fields in:
https://github.com/settings/profile"

  test "$current_user_name" && echo && echo "\
Current name:  $current_user_name"
  test "$current_user_name" && echo "\
Current email: $current_user_email"
  exit
}

function get_field_from_json {
  echo "$1" | grep "\"$2\"" | sed "s/  \"$2\": \"\(.*\)\",$/\1/"
}

function git_config_clear_github_username {
  git config --global --remove-section github 2>/dev/null || true
}

function git_config_add_github_username {
  git_config_clear_github_username
  while [ $# -gt 0 ]
  do
    git config --global --add github.username "$1"
    shift
  done
}

# First arg is "out" - clear existing author config
test 'out' = $1 && {
  git config --global --remove-section user
  git_config_clear_github_username
  exit
}

# Given a github username, fetch json-encoded attributes from the public api
function user_json {
  local username=$1
  if [ $SGU_API_KEY ]; then
    local json=`curl -H "Authorization: token $SGU_API_KEY" -s https://api.github.com/users/$username`
  else
    local json=`curl -s https://api.github.com/users/$username`
  fi
  test "Not Found" = "$(get_field_from_json "$json" message)" && {
    echo "Couldn't find $username on GitHub" >&2
    exit 1
  }
  echo "$json"
}

# One arg given - set the git author to one person
! test $2 && {
  # Fetch user attribs from github
  user_json=`user_json $1`
  # Parse name and email
  name=`get_field_from_json "$user_json" name`
  email=`get_field_from_json "$user_json" email`
  # Set git author
  git config --global user.name  "$name"
  git config --global user.email "$email"
  git_config_add_github_username $1
  exit
}

# More than one arg given - set the git author to a pair
{
  user1=$1
  user2=$2
  # if the second arg is "and" then user2 is the third arg
  test $3 && test 'and' = $user2 && user2=$3
  # ensure consistent ordering of author names regardless of the order given in the args
  sorted_usernames=(`echo -e "$user1\n$user2" | sort`)
  username1=${sorted_usernames[0]}
  username2=${sorted_usernames[1]}
  # Fetch user attribs from github
  user1_json=`user_json $username1`
  user2_json=`user_json $username2`
  # Parse names
  name1=`get_field_from_json "$user1_json" name`
  name2=`get_field_from_json "$user2_json" name`
  names="$name1 & $name2"
  # Create pair email
  email="pair+$username1.$username2@${ORG_DOMAIN:-devbootcamp.com}"
  # Set git author
  git config --global user.name  "$names"
  git config --global user.email "$email"

  git_config_add_github_username $user1 $user2
}
